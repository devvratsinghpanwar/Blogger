const { Schema, model } = require('mongoose');
const { createHmac } = require('crypto');
const { randomBytes } = require('crypto'); 

const userSchema = new Schema({
    fullName: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true,
    },
    salt: {
        type: String,
        // Salt is generated by the pre-save hook, so it's not required in the input
    },
    password: {
        type: String,
        required: true
    },
    profileImageUrl: {
        type: String,
        default: '/images/defaultuser2.svg'
    },
    role: { // Added role back in as it was in your original schema
        type: String,
        enum: ['USER', 'ADMIN'],
        default: 'USER'
    }
}, { timestamps: true });

// Corrected pre-save hook
userSchema.pre("save", function(next) {
    const user = this;

    // Only hash the password if it has been modified (or is new)
    if (!user.isModified('password')) return next();

    // Generate a secure, random salt
    const salt = randomBytes(16).toString('hex'); 
    const hashedPassword = createHmac('sha256', salt)
        .update(user.password)
        .digest('hex');

    user.salt = salt;
    user.password = hashedPassword;

    next();
});

// Method to verify password
userSchema.methods.verifyPassword = function(password) {
    const hashedPassword = createHmac('sha256', this.salt)
        .update(password)
        .digest('hex');
    return this.password === hashedPassword;
};

const User = model('User', userSchema);

module.exports = User;